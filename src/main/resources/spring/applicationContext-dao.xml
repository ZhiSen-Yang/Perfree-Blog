<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 加载外部配置文件 -->
	<context:property-placeholder location="classpath:properties/*.properties"/>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>
		<!-- <property name="maxActive" value="10"/>
		<property name="minIdle" value="5"/> -->
	</bean>
	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"/>
		<property name="typeAliasesPackage" value="com.blog.pojo"></property>
	</bean>
	<!-- 配置包扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.blog.mapper"/>
	</bean>
	
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="login.html"></property>
		<property name="unauthorizedUrl" value="403.html"></property>
		<property name="filterChainDefinitions">
			<value>
				<!-- anon无需认证 -->
				/admin/login.html = anon
				/admin/subLogin.action = anon
				/admin/403.html = anon
				/* = anon
				/admin/* = roles["admin"]
				<!-- authc通过认证之后才可以访问相应的路径 -->
			</value>
		</property>
	</bean>
	<!-- 创建securityManager对象 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm"></property>
	</bean>
	
	<!-- 创建自定义realm -->
	<bean id="realm" class="com.blog.mapper.CustomRealmEnc">
		<!-- 注入加密算法 -->
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
	<!-- 设置加密算法 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<!-- 设置为md5 -->
		<property name="hashAlgorithmName" value="md5"></property>
		<!-- 设置加密次数 -->
		<property name="hashIterations" value="1"></property>
	</bean>
</beans>